import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime

class FinanceDashboard:
    def __init__(self, root):
        self.root = root
        self.root.title("Personal Finance Dashboard")
        
        # Create the main frame
        self.main_frame = ttk.Frame(self.root, padding="10")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Variables to store financial data
        self.income = tk.DoubleVar(value=0.0)
        self.expenses_data = []
        
        # Create the widgets
        self.create_widgets()
        
    def create_widgets(self):
        # Income section
        ttk.Label(self.main_frame, text="Income:").grid(row=0, column=0, sticky=tk.W)
        self.income_entry = ttk.Entry(self.main_frame, textvariable=self.income)
        self.income_entry.grid(row=0, column=1, sticky=(tk.W, tk.E))
        
        # Expenses section
        ttk.Label(self.main_frame, text="Expense Amount:").grid(row=1, column=0, sticky=tk.W)
        self.expense_amount_entry = ttk.Entry(self.main_frame)
        self.expense_amount_entry.grid(row=1, column=1, sticky=(tk.W, tk.E))
        
        ttk.Label(self.main_frame, text="Expense Type:").grid(row=2, column=0, sticky=tk.W)
        self.expense_type_entry = ttk.Entry(self.main_frame)
        self.expense_type_entry.grid(row=2, column=1, sticky=(tk.W, tk.E))
        
        ttk.Label(self.main_frame, text="Month:").grid(row=3, column=0, sticky=tk.W)
        self.expense_month_entry = ttk.Entry(self.main_frame)
        self.expense_month_entry.grid(row=3, column=1, sticky=(tk.W, tk.E))
        
        # Buttons to add expense and update balance
        self.add_expense_button = ttk.Button(self.main_frame, text="Add Expense", command=self.add_expense)
        self.add_expense_button.grid(row=4, column=0, columnspan=2, pady=10)
        
        self.update_button = ttk.Button(self.main_frame, text="Update Balance", command=self.update_balance)
        self.update_button.grid(row=5, column=0, columnspan=2, pady=10)
        
        # Graph buttons
        self.bar_graph_button = ttk.Button(self.main_frame, text="Show Bar Graph", command=self.show_bar_graph)
        self.bar_graph_button.grid(row=6, column=0, pady=10)
        
        self.pie_chart_button = ttk.Button(self.main_frame, text="Show Pie Chart", command=self.show_pie_chart)
        self.pie_chart_button.grid(row=6, column=1, pady=10)
        
        # Balance section
        ttk.Label(self.main_frame, text="Balance:").grid(row=7, column=0, sticky=tk.W)
        self.balance = tk.DoubleVar(value=0.0)
        self.balance_label = ttk.Label(self.main_frame, textvariable=self.balance)
        self.balance_label.grid(row=7, column=1, sticky=(tk.W, tk.E))
        
        # Configure grid
        self.main_frame.columnconfigure(1, weight=1)
        
    def add_expense(self):
        try:
            amount = float(self.expense_amount_entry.get())
            expense_type = self.expense_type_entry.get()
            month = self.expense_month_entry.get()
            self.expenses_data.append({'amount': amount, 'type': expense_type, 'month': month})
            messagebox.showinfo("Success", "Expense added successfully")
        except ValueError:
            messagebox.showerror("Error", "Invalid amount entered")
            
    def update_balance(self):
        income = self.income.get()
        total_expenses = sum(expense['amount'] for expense in self.expenses_data)
        balance = income - total_expenses
        self.balance.set(balance)
        
    def show_bar_graph(self):
        if not self.expenses_data:
            messagebox.showwarning("Warning", "No expenses to display")
            return
        
        df = pd.DataFrame(self.expenses_data)
        monthly_expenses = df.groupby('month')['amount'].sum()
        
        fig, ax = plt.subplots()
        monthly_expenses.plot(kind='bar', ax=ax)
        ax.set_xlabel("Month")
        ax.set_ylabel("Amount")
        ax.set_title("Monthly Expenses")
        
        self.display_graph(fig)
        
    def show_pie_chart(self):
        if not self.expenses_data:
            messagebox.showwarning("Warning", "No expenses to display")
            return
        
        df = pd.DataFrame(self.expenses_data)
        expense_types = df.groupby('type')['amount'].sum()
        
        fig, ax = plt.subplots()
        expense_types.plot(kind='pie', ax=ax, autopct='%1.1f%%')
        ax.set_ylabel("")
        ax.set_title("Expenses by Type")
        
        self.display_graph(fig)
        
    def display_graph(self, fig):
        graph_window = tk.Toplevel(self.root)
        graph_window.title("Graph")
        
        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=1)

if __name__ == "__main__":
    root = tk.Tk()
    app = FinanceDashboard(root)
    root.mainloop()
